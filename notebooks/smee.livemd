<!-- livebook:{"app_settings":{"slug":"smee"}} -->

# Smee Workbook

```elixir
Mix.install(
 [{:smee, ">= 0.2.0"}, {:smee_view, ">= 0.1.0"}, {:smee_feds, ">= 0.1.0"}, {:rambo, "~> 0.3.4"}, {:kino, "~>0.9.4"}]
)
alias Smee.{Metadata, Entity, Source, MDQ}
```

## Grabbing some aggregated metadata with Smee and showing the XML

We download the XML, store it in a Metadata struct before outputting the XML again.

```elixir
xml_fragment =
  Smee.source("http://metadata.ukfederation.org.uk/ukfederation-metadata.xml")
  |> Smee.fetch!()
  |> Smee.Metadata.xml()
  |> String.slice(0..5000) # I'd rather not show 80MB of XML!

Kino.Markdown.new("""
\`\`\`xml
  #{xml_fragment}
\`\`\`
""")
```

## Using MDQ

MDQ is a much more efficient way to fetch just the metadata you need, when you need it. This snippet is returning a
`Smee.Entity` struct.

```elixir
cern_idp =
  MDQ.source("http://mdq.ukfederation.org.uk/")
  |> MDQ.lookup!("https://cern.ch/login")
```

## List all IdP entity IDs along with their hashed IDs

Here we download a large aggregated metadata file, and stream the entity data from it one by one to extract just the 
entity IDs and SHA1 ID hashes. The resulting map is piped into Kino for display.

```elixir
alias Smee.{Source, Fetch, Filter, Metadata}

"http://metadata.ukfederation.org.uk/ukfederation-metadata.xml"
|> Source.new()
|> Fetch.remote!()
|> Metadata.stream_entities()
|> Filter.idp()
|> Stream.map(fn e -> %{ entity_id: e.uri, hashed_id: "{sha1}#{e.uri_hash}" } end)
|> Enum.to_list()
|> Kino.DataTable.new()

```

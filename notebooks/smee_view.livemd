<!-- livebook:{"app_settings":{"slug":"smee_view"}} -->

# SmeeView Workbook

```elixir
Mix.install(
  [{:smee, ">= 0.2.0"}, {:smee_view, ">= 0.1.0"}, {:smee_feds, ">= 0.1.0"}, {:rambo, "~> 0.3.4"}, {:kino, "~>0.9.4"}]
)
alias Smee.{Metadata, Entity, Source, MDQ}
```

## What is SmeeView?

SmeeView is a metadata parsing extension to Smee. SmeeView provides easy to use functions for extracting lists of
information from SAML metadata as Elixir structs.

Smee provides access to entity metadata XML as both strings and parsed xmerl records but leaves the user to find and
extract the information they need. SmeeView aims to fill this gap by providing tools for working with the most commonly
used information in SAML metadata.

SmeeView is loosely based on the concept of functional data access "lenses".

## First let's grab some federation metadata

This may take awhile to download!

```elixir
federation_metadata = Smee.source("http://metadata.ukfederation.org.uk/ukfederation-metadata.xml")
                      |> Smee.fetch!()
```

## Also let's get one entity via MDQ

We'll reuse this enttiy data a few times later

```elixir

entity = Smee.MDQ.source("http://mdq.ukfederation.org.uk/")
         |> Smee.MDQ.lookup!("https://cern.ch/login")

```

### Extracting all data for an entity

The top-level `view_one/2` function will return one entity "aspect" struct.

```elixir

SmeeView.view_one(entity)

```

### Viewing all logos in an entire federation

You can view all logos as a list:

```elixir
SmeeView.Logos.view(federation_metadata)

```

But it might be more useful to have a list of all logos for each entity:

```elixir
SmeeView.Logos.prism(federation_metadata)

```

### Selecting the most appropriate service displayname

Entity metadata often contains information in various languages so that UIs can be localised.

```elixir
entity
|> SmeeView.Displaynames.view()
|> SmeeView.Displaynames.pick("en")
|> SmeeView.Aspects.Displayname.text()
```

### Find all the tiny square logos for IdPs in PNG format in German

(It's a very contrived example)

```elixir
federation_metadata
|> SmeeView.Logos.view(:idp)
|> Enum.filter(
     fn logo ->
       SmeeView.Aspects.Logo.size(logo) == :tiny &&
         SmeeView.Aspects.Logo.shape(logo) == :square &&
         SmeeView.Aspects.Logo.format(logo) == :png &&
         SmeeView.Aspects.Logo.lang(logo) == "de"
     end
   )

```

### Extract the assurance certifications of each entity in a federation

This demonstrates the usefulness of prism views. We're piping the output into Kino for a nice table.

```elixir
SmeeView.EntityAttributes.prism(federation_metadata)
|> SmeeView.EntityAttributes.assurance_certifications()
|> Kino.DataTable.new()

```
